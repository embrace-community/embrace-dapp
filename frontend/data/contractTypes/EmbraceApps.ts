/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace EmbraceApps {
  export type AppStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    enabled: PromiseOrValue<boolean>;
  };

  export type AppStructOutput = [BigNumber, string, string, boolean] & {
    id: BigNumber;
    name: string;
    contractAddress: string;
    enabled: boolean;
  };
}

export interface EmbraceAppsInterface extends utils.Interface {
  functions: {
    "addAppToSpace(uint256,uint128)": FunctionFragment;
    "apps(uint256)": FunctionFragment;
    "createApp(string,address,bool)": FunctionFragment;
    "getAppById(uint128)": FunctionFragment;
    "getAppByName(string)": FunctionFragment;
    "getApps()": FunctionFragment;
    "nameToId(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "setAppContractAddress(uint128,address)": FunctionFragment;
    "spaceToAppIdToSpaceApp(uint256,uint256)": FunctionFragment;
    "spaceToAppIds(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAppToSpace"
      | "apps"
      | "createApp"
      | "getAppById"
      | "getAppByName"
      | "getApps"
      | "nameToId"
      | "owner"
      | "setAppContractAddress"
      | "spaceToAppIdToSpaceApp"
      | "spaceToAppIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAppToSpace",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "apps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createApp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getApps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nameToId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAppContractAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spaceToAppIdToSpaceApp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "spaceToAppIds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAppToSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAppById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getApps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nameToId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAppContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spaceToAppIdToSpaceApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spaceToAppIds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EmbraceApps extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EmbraceAppsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAppToSpace(
      _spaceId: PromiseOrValue<BigNumberish>,
      _appIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    apps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean] & {
        id: BigNumber;
        name: string;
        contractAddress: string;
        enabled: boolean;
      }
    >;

    createApp(
      _name: PromiseOrValue<string>,
      _contractAddress: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAppById(
      _appId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[EmbraceApps.AppStructOutput]>;

    getAppByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[EmbraceApps.AppStructOutput]>;

    getApps(
      overrides?: CallOverrides
    ): Promise<[EmbraceApps.AppStructOutput[]]>;

    nameToId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setAppContractAddress(
      _appId: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spaceToAppIdToSpaceApp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        appId: BigNumber;
        name: string;
        contractAddress: string;
        metadata: string;
      }
    >;

    spaceToAppIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addAppToSpace(
    _spaceId: PromiseOrValue<BigNumberish>,
    _appIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  apps(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, boolean] & {
      id: BigNumber;
      name: string;
      contractAddress: string;
      enabled: boolean;
    }
  >;

  createApp(
    _name: PromiseOrValue<string>,
    _contractAddress: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAppById(
    _appId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EmbraceApps.AppStructOutput>;

  getAppByName(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<EmbraceApps.AppStructOutput>;

  getApps(overrides?: CallOverrides): Promise<EmbraceApps.AppStructOutput[]>;

  nameToId(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  setAppContractAddress(
    _appId: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spaceToAppIdToSpaceApp(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string] & {
      appId: BigNumber;
      name: string;
      contractAddress: string;
      metadata: string;
    }
  >;

  spaceToAppIds(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addAppToSpace(
      _spaceId: PromiseOrValue<BigNumberish>,
      _appIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    apps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean] & {
        id: BigNumber;
        name: string;
        contractAddress: string;
        enabled: boolean;
      }
    >;

    createApp(
      _name: PromiseOrValue<string>,
      _contractAddress: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAppById(
      _appId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EmbraceApps.AppStructOutput>;

    getAppByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<EmbraceApps.AppStructOutput>;

    getApps(overrides?: CallOverrides): Promise<EmbraceApps.AppStructOutput[]>;

    nameToId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    setAppContractAddress(
      _appId: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spaceToAppIdToSpaceApp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string] & {
        appId: BigNumber;
        name: string;
        contractAddress: string;
        metadata: string;
      }
    >;

    spaceToAppIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addAppToSpace(
      _spaceId: PromiseOrValue<BigNumberish>,
      _appIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    apps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createApp(
      _name: PromiseOrValue<string>,
      _contractAddress: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAppById(
      _appId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAppByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApps(overrides?: CallOverrides): Promise<BigNumber>;

    nameToId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setAppContractAddress(
      _appId: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spaceToAppIdToSpaceApp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spaceToAppIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAppToSpace(
      _spaceId: PromiseOrValue<BigNumberish>,
      _appIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    apps(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createApp(
      _name: PromiseOrValue<string>,
      _contractAddress: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAppById(
      _appId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAppByName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameToId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAppContractAddress(
      _appId: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spaceToAppIdToSpaceApp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spaceToAppIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
