/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type CommunityMetaDataStruct = {
  handle: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  image: PromiseOrValue<string>;
};

export type CommunityMetaDataStructOutput = [string, string, string, string] & {
  handle: string;
  name: string;
  description: string;
  image: string;
};

export interface CommunitiesTableMethodsInterface extends utils.Interface {
  functions: {
    "communitiesTable()": FunctionFragment;
    "createCommunitiesTable()": FunctionFragment;
    "insertCommunity(uint256,(string,string,string,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "communitiesTable"
      | "createCommunitiesTable"
      | "insertCommunity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "communitiesTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCommunitiesTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insertCommunity",
    values: [PromiseOrValue<BigNumberish>, CommunityMetaDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "communitiesTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommunitiesTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertCommunity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CommunitiesTableMethods extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommunitiesTableMethodsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    communitiesTable(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

    createCommunitiesTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insertCommunity(
      newCommunityId: PromiseOrValue<BigNumberish>,
      _communityMetaData: CommunityMetaDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  communitiesTable(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

  createCommunitiesTable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  insertCommunity(
    newCommunityId: PromiseOrValue<BigNumberish>,
    _communityMetaData: CommunityMetaDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    communitiesTable(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; name: string }>;

    createCommunitiesTable(overrides?: CallOverrides): Promise<void>;

    insertCommunity(
      newCommunityId: PromiseOrValue<BigNumberish>,
      _communityMetaData: CommunityMetaDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    communitiesTable(overrides?: CallOverrides): Promise<BigNumber>;

    createCommunitiesTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    insertCommunity(
      newCommunityId: PromiseOrValue<BigNumberish>,
      _communityMetaData: CommunityMetaDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    communitiesTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCommunitiesTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    insertCommunity(
      newCommunityId: PromiseOrValue<BigNumberish>,
      _communityMetaData: CommunityMetaDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
